server creation
---------------

1.create package.json file         - npm init

2.install express framework        - npm i express

server side technology  - node      - resolve multiple requests at a atime


api
---
http request   ()

header             body
secret data       data-json

types
------
GET    -read
POST   -create         or store
PUT    -complete updation
PATCH  -partial updation
DELETE -remove


server response status code
---------------------------
100   -information
200   -success 
300   -redirection
400   -client side error
500   -server side error


server creation stps
--------------------

1-import express
2-create app using express
3-port number setting       -port number 3000
4-resolve http requests


Nodemon
--------
if we run server using node ,recombilation not work so we use another server nodemon

- npm i -g nodemon


methods
---------
express.json()   -to convert all datas from json to javascript
.json(data)      -convert(js to json) and send the data as response
.status(statusCode) -change the response status code as statusCode





Token in server
-----------------

JWT Token -json web token

install
      -npm i jsonwebtoken

library    -jsonwebtoken

methods
  sign()  -method used to generate jwt token
  verify() -used to verify json web token


token verification
------------------

middlewares
------------
token verification can do using middlewares
middlewares have the capacity to control server requests
it is function with three arguments  -request,response,next
-two types of middleware
1.Application specific middleware
         -work before all reuest in server
2.router specific middleware           
        -can apply to specific requests in server



how to solve runtime errors in js
---------------------------------


try except

 try
    error causing code      work in both conditions

 catch
   error solve               work only when error is present


mongo db
-----------
   installation
   


shell commands
----------------

CRUD                                                                      create rread update delete
 
  -show dbs            -to see database
  -use (database_name) -to open a database
  -show collections    -to see collection inside db
  -db.(collection_name).find -to read all data in collection
  -db.(collection_name).findOne({acno:1000})   -to read a single data
  -db.(collection_name).insertOne({"acno":10025,"name":amal,......})   -create new data


  db.(collection_name).find({balance:{gt:4000}})   -find using a conditions
  db.(collection_name).deleteOne({"uname":"anu"}) -delete count  used to delete
  db.(collection_name).updateOne({uname:anu},{$set:{uname:anu v}})   -update


register  -insertOne
login     -findOne
deposit  -updateOne


server database integration
---------------------------

database    27017

server       3000
mongoose  -used to server mongodb integration




install   -npm i mongoose



mongoose methods

 -mongoose.connect
 -mongoose.model

steps
1.import mongoose
2.state a connection string to integrate 
3.create a model for our collection 
 

front end server integration
-----------------------------
CORS -cross origin resource sharing - library used to frontend server integration
                                                                                           (front end port-4200
                                                                                            server     - 3000
                                                                                            database   -27017)

CORS  installation
npm i cors



steps

1.import cors
2.connection string
















